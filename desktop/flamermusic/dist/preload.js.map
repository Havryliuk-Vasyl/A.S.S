{"version":3,"file":"preload.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;UCrBA;;;;;;;;;ACDA;AACA;AACA,MAAMA,IAAI,GAAGC,mBAAO,CAAC,kBAAM,CAAC;AAC5B,MAAM;EAAEC,aAAa;EAAEC;AAAY,CAAC,GAAGF,mBAAO,CAAC,0BAAU,CAAC;AAE1DC,aAAa,CAACE,iBAAiB,CAAC,UAAU,EAAE;EACxCC,YAAY,EAAGC,QAAQ,IAAKN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAEF,QAAQ,CAAC;EAC7EH,WAAW,EAAE;IACTM,IAAI,EAAEA,CAACC,OAAO,EAAEC,IAAI,KAAK;MACvB,MAAMC,aAAa,GAAG,CAAC,mBAAmB,CAAC;MAC3C,IAAIA,aAAa,CAACC,QAAQ,CAACH,OAAO,CAAC,EAAE;QACnCP,WAAW,CAACM,IAAI,CAACC,OAAO,EAAEC,IAAI,CAAC;MACjC;IACF;EACF;AACN,CAAC,CAAC,C","sources":["webpack://flamermusic/external node-commonjs \"electron\"","webpack://flamermusic/external node-commonjs \"path\"","webpack://flamermusic/webpack/bootstrap","webpack://flamermusic/webpack/runtime/compat","webpack://flamermusic/./electron/preload.js"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + \"/native_modules/\";","// See the Electron documentation for details on how to use preload scripts:\n// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\nconst path = require('path');\nconst { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electron', {\n    getAssetPath: (fileName) => path.join(__dirname, 'assets', 'icons', fileName),\n    ipcRenderer: {\n        send: (channel, data) => {\n          const validChannels = ['show-context-menu'];\n          if (validChannels.includes(channel)) {\n            ipcRenderer.send(channel, data);\n          }\n        },\n      },\n});\n"],"names":["path","require","contextBridge","ipcRenderer","exposeInMainWorld","getAssetPath","fileName","join","__dirname","send","channel","data","validChannels","includes"],"sourceRoot":""}